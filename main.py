import asyncio
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–°–∞–ª–∞—Ç—ã", callback_data="salad")],
    [InlineKeyboardButton(text="–°—É–ø—ã", callback_data="soup")],
    [InlineKeyboardButton(text="–ù–∞–ø–∏—Ç–∫–∏", callback_data="drinks")],
    [InlineKeyboardButton(text="–î–µ—Å–µ—Ä—Ç—ã", callback_data="dessert")]
])

salad_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–°–∞–ª–∞—Ç –ö–∞–ø—Ä–∏–∑ ‚Äî 25 000 —Å—É–º", callback_data="price_salat_kapriz")],
    [InlineKeyboardButton(text="–°–∞–ª–∞—Ç –ì—Ä–µ—á–µ—Å–∫–∏–π ‚Äî 28 000 —Å—É–º", callback_data="price_grecheskiy")],
    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
])

soup_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ë–æ—Ä—â ‚Äî 30 000 —Å—É–º", callback_data="price_borshch")],
    [InlineKeyboardButton(text="–°—É–ø –•–∞—Ä—á–æ ‚Äî 32 000 —Å—É–º", callback_data="price_harcho")],
    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
])

drinks_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–§–∞–Ω—Ç–∞ 1.5–ª ‚Äî 15 000 —Å—É–º", callback_data="price_fanta")],
    [InlineKeyboardButton(text="–ö–æ–ª–∞ 2–ª ‚Äî 20 000 —Å—É–º", callback_data="price_kola")],
    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
])

dessert_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ß–∏–∑–∫–µ–π–∫ ‚Äî 28 000 —Å—É–º", callback_data="price_cheesecake")],
    [InlineKeyboardButton(text="–ß–µ—Ä–Ω—ã–π –õ–µ—Å ‚Äî 32 000 —Å—É–º", callback_data="price_black_forest")],
    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
])

prices = {
    "price_salat_kapriz": "–°–∞–ª–∞—Ç –ö–∞–ø—Ä–∏–∑ ‚Äî 25 000 —Å—É–º",
    "price_grecheskiy": "–°–∞–ª–∞—Ç –ì—Ä–µ—á–µ—Å–∫–∏–π ‚Äî 28 000 —Å—É–º",
    "price_borshch": "–ë–æ—Ä—â ‚Äî 30 000 —Å—É–º",
    "price_harcho": "–°—É–ø –•–∞—Ä—á–æ ‚Äî 32 000 —Å—É–º",
    "price_fanta": "–§–∞–Ω—Ç–∞ 1.5–ª ‚Äî 15 000 —Å—É–º",
    "price_kola": "–ö–æ–ª–∞ 2–ª ‚Äî 20 000 —Å—É–º",
    "price_cheesecake": "–ß–∏–∑–∫–µ–π–∫ ‚Äî 28 000 —Å—É–º",
    "price_black_forest": "–ß–µ—Ä–Ω—ã–π –õ–µ—Å ‚Äî 32 000 —Å—É–º",
}

@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("ü•Ç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω!\n\nüìã –í–æ—Ç –Ω–∞—à–µ –º–µ–Ω—é:", reply_markup=menu_keyboard)

@dp.callback_query(F.data == "menu")
async def show_menu(callback: CallbackQuery):
    await callback.message.edit_text("üìã –ù–∞—à–µ –º–µ–Ω—é:", reply_markup=menu_keyboard)
    await callback.answer()

@dp.callback_query(F.data == "salad")
async def show_salad(callback: CallbackQuery):
    await callback.message.edit_text("ü•ó –í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–∞—Ç:", reply_markup=salad_keyboard)
    await callback.answer()

@dp.callback_query(F.data == "soup")
async def show_soup(callback: CallbackQuery):
    await callback.message.edit_text("üç≤ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–ø:", reply_markup=soup_keyboard)
    await callback.answer()

@dp.callback_query(F.data == "drinks")
async def show_drinks(callback: CallbackQuery):
    await callback.message.edit_text("ü•§ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫:", reply_markup=drinks_keyboard)
    await callback.answer()

@dp.callback_query(F.data == "dessert")
async def show_dessert(callback: CallbackQuery):
    await callback.message.edit_text("üç∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Å–µ—Ä—Ç:", reply_markup=dessert_keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data in prices)
async def show_price(callback: CallbackQuery):
    await callback.answer(prices[callback.data], show_alert=True)

@dp.callback_query(F.data == "back_to_menu")
async def go_back_to_menu(callback: CallbackQuery):
    new_text = "üìã –ù–∞—à–µ –º–µ–Ω—é:"
    new_markup = menu_keyboard

    # –ß—Ç–æ–±—ã –Ω–µ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É "message is not modified"
    if callback.message.text == new_text:
        await callback.answer()
    else:
        await callback.message.edit_text(new_text, reply_markup=new_markup)
        await callback.answer()

async def main():
    bot = Bot(token=TOKEN)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
